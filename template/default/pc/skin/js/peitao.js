/** * 百度地图 */var BMapApplication = {    'isMobile' : false,    'map' : null,                      // 百度地图实例    'panorama' : null,                 // 街景地图实例    'sPoint' : null,                   // 基础地图坐标点实例    'pPoint' : null,                   // 街景地图坐标点    'pageSize' : 20,                    // 分页条数    'count' : 0,                       // 搜索结果统计    'resultList' : [],                 // 搜索结果列表    'listShowState' : true,            // 搜索结果列表的显示状态    'title' : '',    'marker' : [],    'saleStatus' : 1,    'price' : '',    '_text' : null,    '_overText' : null,    /**     * 初始化方法     * @param lng     * @param lat     * @param elemId     */    'init' : function (args){        var lng = args.lng ? args.lng : 0;        var lat = args.lat ? args.lat : 0;        var mapContainerId = args.mapContainerId ? args.mapContainerId : '';        var streetContainerId = args.streetContainerId ? args.streetContainerId : '';        if (mapContainerId != '')        {            this.setBmapContainer(mapContainerId);            this.setSPoint(lng, lat);        }        if (streetContainerId != '')        {            this.setPanoramaContainer(streetContainerId);            this.setPPoint(lng, lat);        }    },    /**     * 设置基本地图容器     * @param elemId     */    'setBmapContainer' : function (elemId){        elemId = elemId == undefined ? 'allmap' : elemId;        this.map = (this.map == null) ? new BMap.Map(elemId) : this.map;        if(this.isMobile) {            this.map.disableDragging();            var that = this;            this.map.addEventListener("click", function(){                that.map.enableDragging();            });        }    },    /* 清空基本地图容器 */    'clearBmapContainer' : function (){        this.map = null;    },    /**     * 设置经纬坐标点     * @param lng     * @param lat     */    'setSPoint' : function (lng, lat){        this.sPoint = (this.sPoint == null) ? new BMap.Point(lng, lat) : this.sPoint;    },    /**     * 设置     * @param lng     * @param lat     */    'setPPoint' : function (lng, lat){        this.pPoint = (this.pPoint == null) ? new BMap.Point(lng, lat) : this.pPoint;    },    /**     * 得到圆的内接正方形bounds     * @param {Point} centerPoi 圆形范围的圆心     * @param {Number} r 圆形范围的半径     * @return 无返回值     */    'getSquareBounds' : function (centerPoi, r){        var a = Math.sqrt(2) * r;    // 正方形边长        mPoi = this.getMecator(centerPoi);        var x0 = mPoi.x, y0 = mPoi.y;        var x1 = x0 + a / 2 , y1 = y0 + a / 2;    // 东北点        var x2 = x0 - a / 2 , y2 = y0 - a / 2;    // 西南点        var ne = this.getPoi(new BMap.Pixel(x1, y1)), sw = this.getPoi(new BMap.Pixel(x2, y2));        return new BMap.Bounds(sw, ne);    },    /**     * 根据球面坐标获得平面坐标     * @param poi     * @returns {*}     */    'getMecator' : function (poi){        return this.map.getMapType().getProjection().lngLatToPoint(poi);    },    /**     * 根据平面坐标获得球面坐标     * @param mecator     * @returns {*}     */    'getPoi' : function (mecator){        return this.map.getMapType().getProjection().pointToLngLat(mecator);    },    /**     * 搜索结果显示到页面上     * @param keyword 关键词     * @param result  搜索结果     * @param iconFlagClass 显示ICON标识     */    'showResultToPage' : function (keyword, result, iconFlagClass){        var markContainer = $('#result');        var markElem = markContainer.find('li:first').clone();        markContainer.find('li').remove();        var html = '';        if (result.length > 0)        {            for(var i = 0; i < result.length; i++)            {                var list = result[i],lat = list.lat,lng = list.lng,title = list.title,address = list.address;                html = '<li onclick="BMapApplication.clickPoiData(\''+title+'\',\''+address+'\',\''+lat+'\',\''+lng+'\')">'                     + '<i>'+(i+1)+'</i>'                     + '<span class="text">'+list.title+'</span>'                     + '<span class="fr">'                     + '<em class="distance">'+list.distance+'米</em></span>'                     + '</li>';                markContainer.append(html);            }        }    },    clickPoiData : function (title,address,lat,lng) {        var opts = {            width : 200,     // 信息窗口宽度           // height: 80,     // 信息窗口高度            title : title , // 信息窗口标题            enableMessage:false//设置允许信息窗发送短息        };        var infoWindow = new BMap.InfoWindow(address, opts);  // 创建信息窗口对象        this.map.openInfoWindow(infoWindow,new BMap.Point(lng,lat)); //开启信息窗口    },    /**     * 周边配套地图     * @param lng     * @param lat     * @param keyword     * @param iconFlagClass 显示的ICON标识     */    'getAreaMap' : function (keyword, iconFlagClass){        var ePoint = '';                          // 搜索结果坐标点        var distance = 0;                         // 搜索结果距离目标点距离(单位/米)        var _this = this;                         // 解决闭包作用域问题        this.map.disableScrollWheelZoom();        this.map.centerAndZoom(this.sPoint,15);        this.map.clearOverlays();    // 清除页面标记        var circle = new BMap.Circle(this.sPoint, 1500, {fillColor:"blue", strokeWeight: 1 ,fillOpacity: 0.1, strokeOpacity: 0.1});        var options = {            pageCapacity: this.pageSize,            renderOptions : {                map : _this.map,               // panel:"result",                'autoViewport' : false,                'selectFirstResult' : false            }        };        if(!this.isMobile)        {            this.map.addOverlay(circle);    // 添加页面标记            var top_left_navigation = new BMap.NavigationControl();            this.map.addControl(top_left_navigation);           // 添加缩放比例            options.onSearchComplete = function(results){                _this.resultList = [];    // 清空搜索结果集合                // 判断状态是否正确                if (local.getStatus() == BMAP_STATUS_SUCCESS)                {                    _this.count = results.getCurrentNumPois();console.log(results);                    for (var i = 0; i < results.getCurrentNumPois(); i ++)                    {                        ePoint = new BMap.Point(results.getPoi(i).point.lng, results.getPoi(i).point.lat);                        distance = parseInt(_this.map.getDistance(_this.sPoint, ePoint));                        _this.resultList.push({key:i,address:results.getPoi(i).address,title:results.getPoi(i).title,distance:distance,lat:results.getPoi(i).point.lat,lng:results.getPoi(i).point.lng});                    }                }                _this.resultList.sort(function(j, i) {                    return j.distance - i.distance;                });                _this.showResultToPage(results.keyword, _this.resultList, iconFlagClass);            };        }else{            options.renderOptions.selectFirstResult = false;        }        //var marker = new BMap.Marker(this.sPoint);          // 创建标注        //this.map.addOverlay(marker);                        // 将标注添加到地图中        this.setComplexPrototype();        var myCompOverlay = new this.ComplexCustomOverlay(this.sPoint,this.title,this.price,this.saleStatus);        this.map.addOverlay(myCompOverlay);        var local = new BMap.LocalSearch(this.map, options);        var bounds = this.getSquareBounds(circle.getCenter(), circle.getRadius());        local.searchInBounds(keyword, bounds);    },    ComplexCustomOverlay:function(point, text, mouseoverText){        this._point = point;        this._text = text;        this._overText = mouseoverText;    },    setComplexPrototype : function(){        this.ComplexCustomOverlay.prototype = new BMap.Overlay();        var _this = this;        this.ComplexCustomOverlay.prototype.initialize = function(){            var that = this;            var div = this._div = document.createElement("div");            div.className = 'map-label';            var h2 = document.createElement("h2");            var div2 = document.createElement("div");            div2.className = "map-label-price";            div.appendChild(h2);            div.appendChild(div2);            $(div2).html(this._overText);            $(h2).html(this._text);//.appendChild(document.createTextNode(this._text));document.            _this.map.getPanes().labelPane.appendChild(div);            return div;        };        this.ComplexCustomOverlay.prototype.draw = function(){            var map = _this.map;            var pixel = map.pointToOverlayPixel(this._point);            this._div.style.left = pixel.x - 40 + "px";            this._div.style.top  = pixel.y - 90 + "px";        }    }};